using QLDT.Common.BLL;
using QLDT.Common.Req;
using QLDT.Common.Res;
using QLDT_DAL;
using QLDT_DAL.Models; // Ensure this namespace is correct for your models
using System.Linq;

namespace QLDT.BLL
{
    public class BlogSvc : GenericSvc<BlogRep, Blog>
    {
        private BlogRep blogRep;
        public BlogSvc()
        {
            blogRep = new BlogRep();
        }

        #region -- Methods --

        public override SingleRes Read(int id)
        {
            var res = new SingleRes();
            var blog = _rep.Read(id);
            res.Data = blog;
            return res;
        }

        // Search Blog
        public object SearchBlog(string keyword, int page, int size)
        {
            var blogs = All.AsQueryable();

            if (!string.IsNullOrEmpty(keyword))
            {
                blogs = blogs.Where(x => x.Title.Contains(keyword) || x.Content.Contains(keyword));
            }

            var offset = (page - 1) * size;
            var total = blogs.Count();
            int totalPage = (total % size) == 0 ? (int)(total / size) : (int)(1 + (total / size));

            var data = blogs.OrderByDescending(x => x.CreatedAt).Skip(offset).Take(size).ToList();

            var res = new
            {
                Data = data,
                TotalRecord = total,
                TotalPages = totalPage,
                Page = page,
                Size = size
            };

            return res;
        }

        // Create Blog
        public SingleRes CreateBlog(BlogReq blogReq)
        {
            var res = new SingleRes();
            Blog blog = new Blog();
            // blog.IdBlog will be auto-generated by the database for new entries
            blog.Type = blogReq.Type;
            blog.Title = blogReq.Title;
            blog.Content = blogReq.Content;
            blog.CreatedAt = blogReq.CreatedAt ?? DateTime.Now; // Set creation date if not provided

            res = blogRep.CreateBlog(blog);
            return res;
        }

        // Update Blog
        public SingleRes UpdateBlog(BlogReq blogReq)
        {
            var res = new SingleRes();
            var blog = _rep.Read(blogReq.IdBlog);
            if (blog == null)
            {
                res.SetError("EZ404", "Blog not found");
                return res;
            }

            blog.Type = blogReq.Type;
            blog.Title = blogReq.Title;
            blog.Content = blogReq.Content;
            // Assuming CreatedAt should not be updated or handle it as per your business logic
            // blog.CreatedAt = blogReq.CreatedAt; 

            res = blogRep.UpdateBlog(blog);
            return res;
        }

        public SingleRes DeleteBlog(int id)
        {
            var res = new SingleRes();
            var blog = _rep.Read(id);
            if (blog == null)
            {
                res.SetError("EZ404", "Blog not found");
            }
            else
            {
                // In a real application, you might mark it as inactive rather than physically delete
                // For simplicity, this example uses the base GenericSvc delete (physical delete)
                res = _rep.DeleteBlog(id);
            }
            return res;
        }

        // Get all Blogs
        public SingleRes GetBlogs()
        {
            var res = new SingleRes();
            var blogs = _rep.All.ToList();
            res.SetData("200", blogs);
            return res;
        }

        #endregion
    }
}